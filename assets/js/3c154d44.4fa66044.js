"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[160],{3905:function(e,t,o){o.d(t,{Zo:function(){return c},kt:function(){return g}});var a=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(o),d=n,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return o?a.createElement(g,l(l({ref:t},c),{},{components:o})):a.createElement(g,l({ref:t},c))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<r;p++)l[p]=o[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,o)}d.displayName="MDXCreateElement"},4537:function(e,t,o){o.r(t),o.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var a=o(7462),n=o(3366),r=(o(7294),o(3905)),l=["components"],i={id:"basic-usage",title:"Basics",sidebar_label:"Basics",slug:"/"},s=void 0,p={unversionedId:"basic-usage",id:"basic-usage",title:"Basics",description:"Welcome! This guide will show you how to use the components and utilities in this package. You'll find:",source:"@site/docs/basic-usage.md",sourceDirName:".",slug:"/",permalink:"/mui-google-places-autocomplete/docs/",draft:!1,editUrl:"https://github.com/dylmye/mui-google-places-autocomplete/edit/master/docs/docs/basic-usage.md",tags:[],version:"current",frontMatter:{id:"basic-usage",title:"Basics",sidebar_label:"Basics",slug:"/"},sidebar:"docs",next:{title:"Props",permalink:"/mui-google-places-autocomplete/docs/props"}},c={},u=[{value:"Install",id:"install",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Load Google Maps JavaScript API",id:"load-google-maps-javascript-api",level:3},{value:"Method 1: Separate script",id:"method-1-separate-script",level:4},{value:"Method 2: Passing the key",id:"method-2-passing-the-key",level:4},{value:"Use the component",id:"use-the-component",level:3},{value:"Save the selected result",id:"save-the-selected-result",level:3},{value:"Usage with Formik",id:"usage-with-formik",level:3}],m={toc:u};function d(e){var t=e.components,o=(0,n.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Welcome! This guide will show you how to use the components and utilities in this package. You'll find:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<GooglePlacesAutocomplete />")," - The dropdown that is connected to Google's Places API"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<GooglePlacesAutocompleteField />")," - The above dropdown, with state support for Formik"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"geocodeByAddress")," - Convert an address string to a Google Maps GeocoderResult. ",(0,r.kt)("a",{parentName:"li",href:"https://developers.google.com/maps/documentation/javascript/reference/geocoder#Geocoder"},"See Google API Reference"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"geocodeByLatLng")," - Like above, but latitude/longitude rather than an address string."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"geocodeByPlaceId")," - Like above, but a place ID from the Roads API rather than lat/long.")),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("p",null,"To install the package in your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @dylmye/mui-google-places-autocomplete\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"yarn add @dylmye/mui-google-places-autocomplete\n")),(0,r.kt)("p",null,"You also need ",(0,r.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/getting-started/installation/"},"Material UI Core v5"),", and ",(0,r.kt)("a",{parentName:"p",href:"https://beta.reactjs.org/learn/start-a-new-react-project"},"React"),"."),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("h3",{id:"load-google-maps-javascript-api"},"Load Google Maps JavaScript API"),(0,r.kt)("p",null,"You need an API key to use the ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/maps/documentation/javascript/cloud-setup#create"},"Google Maps Javascript API"),", including the data loading in this component. When you load the API's scripts, you pass your API key. The key looks like this: ",(0,r.kt)("inlineCode",{parentName:"p"},"AIzaAAAAABBBBBCCCCCC_zzYYXXWW"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It's good practice not to keep API keys in your source code, instead storing it in an ",(0,r.kt)("a",{parentName:"p",href:"https://create-react-app.dev/docs/adding-custom-environment-variables/"},"environment variable"),".")),(0,r.kt)("p",null,"There's two ways to load the API:"),(0,r.kt)("h4",{id:"method-1-separate-script"},"Method 1: Separate script"),(0,r.kt)("p",null,"Loading the script in your static template or at the root component is great if you need your component straight away or if you are using Map APIs outside of the component."),(0,r.kt)("p",null,"First, generate an ",(0,r.kt)("inlineCode",{parentName:"p"},"apiKey")," in order to use it to load ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/maps/documentation/javascript/"},"Google Maps JavaScript API"),". Then, use it to load it in your HTML file, adding a script tag:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- public/index.html --\x3e\n<script \n  src="https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_API_KEY&libraries=places"\n/>\n')),(0,r.kt)("p",null,"You may alternatively wish to use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/googlemaps/js-api-loader"},"@googlemaps/js-api-loader"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// App.js\nimport React, { useEffect } from "react";\nimport { Loader } from "@googlemaps/js-api-loader";\n\nfunction App() {\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: "YOUR_GOOGLE_API_KEY",\n      libraries: ["places"],\n    });\n\n    loader.load();\n  });\n}\n')),(0,r.kt)("h4",{id:"method-2-passing-the-key"},"Method 2: Passing the key"),(0,r.kt)("p",null,"Pass the API key to the component, as the ",(0,r.kt)("inlineCode",{parentName:"p"},"apiKey")," prop. It'll automatically load the script with the given key. This is better suited for you if you only use Google Maps API for this one field."),(0,r.kt)("h3",{id:"use-the-component"},"Use the component"),(0,r.kt)("p",null,"If you're not using Formik, you can use it like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import React from "react";\nimport GooglePlacesAutocomplete from "@dylmye/mui-google-places-autocomplete";\n\nconst Component = () => (\n  <div>\n    <GooglePlacesAutocomplete apiKey="YOUR_GOOGLE_API_KEY" />\n    here if you\'re using Method 2\n  </div>\n);\n')),(0,r.kt)("p",null,"All the props are detailed in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/props"},"API Reference"),". Some methods are also exposed through the component's ",(0,r.kt)("a",{parentName:"p",href:"https://beta.reactjs.org/reference/react/useImperativeHandle#exposing-your-own-imperative-methods"},"imperative ref"),", these methods are also documented on that page."),(0,r.kt)("h3",{id:"save-the-selected-result"},"Save the selected result"),(0,r.kt)("p",null,"You can use a state management solution like Redux, but to keep it simple we're using a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"useState"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport GooglePlacesAutocomplete from '@dylmye/mui-google-places-autocomplete';\n\nconst Component = () => (\n  const [value, setValue] = useState(null);\n\n  return (\n    <div>\n      <GooglePlacesAutocomplete\n        inputValue={value}\n        setInputValue={newValue => setValue(newValue)}\n        label=\"Enter your location\"\n      />\n    </div>\n  );\n}\n")),(0,r.kt)("h3",{id:"usage-with-formik"},"Usage with Formik"),(0,r.kt)("p",null,"You can use the field like any standard TextField, ",(0,r.kt)("strong",{parentName:"p"},"just note the different import"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport { GooglePlacesAutocompleteField } from '@dylmye/mui-google-places-autocomplete';\nimport { Field, Form, Formik } from \"formik\";\n\nconst MyForm = () => (\n\n  return (\n    <Formik initialValues={{ location: '' }} onSubmit={console.log}>\n      <Form>\n        <Field\n          component={GooglePlacesAutocompleteField}\n          name=\"location\"\n          label=\"Enter your location\"\n        />\n      </Form>\n    </Formik>\n  );\n}\n")))}d.isMDXComponent=!0}}]);